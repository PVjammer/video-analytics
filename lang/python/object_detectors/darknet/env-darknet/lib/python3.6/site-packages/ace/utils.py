import numpy as np
import cv2

def get_operations(operations):
    s = ""
    for o in operations:
        s += o
        s += ". "
    return s

def annotate_frame(res, frame, classes, db):
    colors = [(255, 0, 0), (0, 255, 0), (0, 0, 255), (255, 255, 0), (128, 0, 255), (255, 128, 0)]
    data = res.data
    color_counter = 0
    for roi in data.roi:
        if roi.HasField("box"): #within roi message, one of localization is BoundingBox
            box = roi.box
            if roi.classification not in classes:
                print("Addidng '{!s}' to classification dict".format(roi.classification))
                classes[roi.classification] = color_counter % len(colors)
                color_counter += 1
            display_text = "{!s} - {!s}".format(roi.classification, roi.confidence)
            cv2.rectangle(frame, (box.corner1.x, box.corner1.y), (box.corner2.x, box.corner2.y), colors[classes[roi.classification]], 2)
            cv2.putText(frame, display_text, (box.corner1.x, box.corner1.y), cv2.FONT_HERSHEY_COMPLEX, 1, (255, 255, 0))
        if db:
            db.write(analytic="{!s}_{!s} ".format(res.analytic.name,res.analytic.addr), filters=res.analytic.filters, 
                     classification=roi.classification, score=roi.confidence)
    cv2.putText(frame, get_operations(res.analytic.operations),(10,25),cv2.FONT_HERSHEY_COMPLEX, 0.5, (255, 255, 0))
    return frame

def render(resp, window_names, classes, frame, db):
    for i, res in enumerate(resp.results):
        if res.frame.frame.ByteSize() > 0:
            img_bytes = np.fromstring(res.frame.frame.img, dtype=np.uint8)
            frame = cv2.imdecode(img_bytes, 1)   
        window_name = "{!s}: {!s}".format(res.analytic.name, res.analytic.addr)
        if window_name not in window_names:
            cv2.namedWindow(window_name)
            window_names.append(window_name)
        frame = annotate_frame(res, frame, classes, db)
        cv2.imshow(window_name, frame)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break    
